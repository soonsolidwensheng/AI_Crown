name: Deploy to Dev

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version number for the Docker image'
        required: true
      skip_image:
        description: 'Skip image build and push (true/false)'
        required: false
        default: 'false'
env:
  REGISTRY: registry.cn-beijing.aliyuncs.com 
  NAMESPACE: studio_ai # ACR命名空间
  IMAGE_NAME: ai_crown 
jobs:
  deploy-to-dev:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
          
      - name: Login to Alibaba Cloud ACR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.ACR_USERNAME }}
          password: ${{ secrets.ACR_PASSWORD }}
      - name: Build Docker image
        if: ${{ inputs.skip_image != 'true' }}
        run: |
          VERSION=${{ github.event.inputs.version }}
          ACR_URI=${{ env.REGISTRY }}/${{ env.NAMESPACE }}/${{ env.IMAGE_NAME }}

          echo "Building Docker image with tag $ACR_URI:$VERSION"
          docker build -t $ACR_URI:$VERSION .
          docker login -u "${{secrets.ACR_USERNAME}}" -p "${{secrets.ACR_PASSWORD}}" ${{ env.REGISTRY }}
          echo "Pushing Docker image with tag $ACR_URI:$VERSION"
          docker push $ACR_URI:$VERSION
          
      # - name: Push Docker image to ACR
      #   if: ${{ inputs.skip_image != 'true' }}
      #   run: |
      #     VERSION=${{ github.event.inputs.version }}
      #     ACR_URI=${{ env.REGISTRY }}/${{ env.NAMESPACE }}/${{ env.IMAGE_NAME }}
          
      #     docker login -u "${{secrets.ACR_USERNAME}}" -p "${{secrets.ACR_PASSWORD}}" ${{ env.REGISTRY }}
      #     echo "Pushing Docker image with tag $ACR_URI:$VERSION"
      #     docker push $ACR_URI:$VERSION
            
      # - name: Configure Alibaba Cloud Credentials
      #   uses: aliyun/configure-alicloud-credentials@v2
      #   with:
      #     access-key-id: ${{secrets.ALICLOUD_ACCESS_KEY}}
      #     access-key-secret: ${{secrets.ALICLOUD_SECRET}}
      #     region: cn-beijing
          
      - name: Install Aliyun CLI
        run: |
          # 检查 CLI 是否已安装
          if ! command -v aliyun &> /dev/null; then
            echo "Installing Aliyun CLI..."
            curl -fsSL https://aliyuncli.alicdn.com/aliyun-cli-linux-3.0.161-amd64.tgz -o aliyun-cli.tgz
            tar -xzf aliyun-cli.tgz
            sudo mv aliyun /usr/local/bin/
            echo "Aliyun CLI installed successfully"
          else
            echo "Aliyun CLI already installed"
          fi
          aliyun version 
       
      - name: Setup CLI Credentials
        run: |
          aliyun configure set \
            --mode AK \
            --profile default \
            --region cn-beijing \
            --access-key-id ${{ secrets.ALICLOUD_ACCESS_KEY }} \
            --access-key-secret ${{ secrets.ALICLOUD_SECRET }}
            
      - name: Generate FC3 Config
        env:
          ACR_IMAGE: ${{ env.REGISTRY }}/${{ env.NAMESPACE }}/${{ env.IMAGE_NAME }}:${{ github.event.inputs.version }}
          FUNCTION_NAME: ai_crown_acr
        run: |
          cat <<EOF > fc3-config.json
          {
            "functionName": "$FUNCTION_NAME",
            "runtime": "custom-container",
            "handler": "index.handler",
            "timeout": 60,
            "customContainerConfig": {
              "image": "$ACR_IMAGE",
              "command": ["node"],
              "args": ["index.js"]
            }
          }
          EOF
  
      - name: Deploy Function
        run: |
          aliyun fc CreateFunction \
            --region cn-beijing \ 
            --function-name $FUNCTION_NAME \
            --body $(pwd)/fc3-config.json 
          # aliyun fc UpdateFunction \
          #   --region cn-beijing \ 
          #   --function-name $FUNCTION_NAME \
          #   --body file://fc3-config.json
  
      - name: Cleanup
        run: rm -f fc3-config.json
      
          
      # - name: Create Release Tag
      #   env:
      #       VERSION: ${{ github.event.inputs.version }}
      #   run: |
      #       git config user.name "github-actions[bot]"
      #       git config user.email "github-actions[bot]@users.noreply.github.com"
      #       git tag -a "v$VERSION" -m "Release version $VERSION"
        
      #       echo "Pushing the tag to the repository"
      #       git push https://${{ secrets.FGPAT_TOKEN }}@github.com/${{ github.repository }} "v$VERSION"
          
